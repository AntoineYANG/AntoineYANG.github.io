{"version":3,"sources":["Contaniners/Navigator.tsx","Contaniners/Container.tsx","MainPages/Home.tsx","MainPages/BadUrl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigator","props","className","style","background","color","fontSize","border","padding","minHeight","textAlign","this","display","fontStyle","width","margin","Array","items","map","slice","length","_","i","key","parseJSX","Math","floor","item","to","url","text","Component","Container","children","Home","BadUrl","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRA4BaA,EAAb,kDACI,WAAmBC,GAAwB,uCACjCA,GAFd,qDAKkC,IAAD,OACzB,OACI,yBAAKC,UAAU,oCACfC,MAAK,aACDC,WAAY,UACZC,MAAO,QACPC,SAAU,OACVC,OAAQ,OACRC,QAAS,iBACTC,UAAW,MACXC,UAAW,QACRC,KAAKV,MAAME,QAEd,2BACAA,MAAO,CACHS,QAAS,eACTF,UAAW,SACXG,UAAW,SACXC,MAAO,OACPC,OAAQ,kBACRT,SAAU,SAPd,QAWA,yBACAH,MAAO,CACHS,QAAS,iBAET,kBAAC,IAAD,KAEQ,YAAKI,MAAL,YACOL,KAAKV,MAAMgB,MAAMC,KAAI,kBAAM,SADlC,mBAEOP,KAAKV,MAAMgB,MAAMC,KAAI,kBAAM,WAC/BC,MAAM,EAA6B,EAA1BR,KAAKV,MAAMgB,MAAMG,OAAa,GAAGF,KAAI,SAACG,EAASC,GACvD,OAAIA,EAAI,IAAM,EAEN,2BAAOpB,UAAU,UAAUqB,IAAM,WAAaD,GAA9C,KAGG,EAAKE,SAAS,EAAKvB,MAAMgB,MAAMQ,KAAKC,MAAMJ,EAAI,aA5CzF,+BAsDqBK,GACb,OACI,kBAAC,IAAD,CAAMC,GAAKD,EAAKE,IAAMN,IAAMI,EAAKG,MAC7B,2BAAO5B,UAAU,YACXyB,EAAKG,WA1D3B,GAA+BC,a,OCZlBC,G,MAAb,kDACI,WAAmB/B,GAAwB,uCACjCA,GAFd,qDAMM,OACE,yBAAKC,UAAU,oCACfC,MAAK,eACEQ,KAAKV,MAAME,QAEdQ,KAAKV,MAAMgC,cAXvB,GAA+BF,cCJlBG,EAAb,uKAEI,OACI,kBAAC,EAAD,KACE,kEAGA,8EAGA,+FAVV,GAA0BH,aCAbI,EAAb,uKAEI,OACI,kBAAC,EAAD,KACE,0DAJV,GAA4BJ,aC6BbK,E,uKAxBX,OACE,oCACE,kBAAC,EAAD,CAAWnB,MAAQ,CAAC,CAClBa,KAAM,OACND,IAAK,KACJ,CACDC,KAAM,cACND,IAAK,gBACJ,CACDC,KAAM,SACND,IAAK,cAGP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,KAAK,IAAIC,OAAK,EAACC,UAAYL,IAClC,kBAAC,IAAD,CAAOG,KAAK,MAAME,UAAYJ,W,GAlBxBJ,aCHES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a1bbe1ca.chunk.js","sourcesContent":["/*\r\n * @Author: Antoine YANG \r\n * @Date: 2020-04-13 16:47:52 \r\n * @Last Modified by: Antoine YANG\r\n * @Last Modified time: 2020-04-13 19:10:30\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Link, BrowserRouter } from \"react-router-dom\";\r\n\r\n\r\nexport type MenuItem = {\r\n    text: string;\r\n    url: string;\r\n};\r\n\r\nexport type Menu = Array<MenuItem>;\r\n\r\nexport interface NavigatorProps {\r\n    style?: React.CSSProperties;\r\n    items: Menu;\r\n};\r\n\r\nexport interface NavigatorState {\r\n    style?: React.CSSProperties;\r\n};\r\n\r\n\r\nexport class Navigator extends Component<NavigatorProps, NavigatorState, undefined> {\r\n    public constructor(props: NavigatorProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"container monospaced unselectable\"\r\n            style={{\r\n                background: \"#20242A\",\r\n                color: \"white\",\r\n                fontSize: \"16px\",\r\n                border: \"none\",\r\n                padding: \"18px 20px 14px\",\r\n                minHeight: \"1em\",\r\n                textAlign: \"left\",\r\n                ...this.props.style\r\n            }} >\r\n                <label\r\n                style={{\r\n                    display: \"inline-block\",\r\n                    textAlign: \"center\",\r\n                    fontStyle: \"italic\",\r\n                    width: \"44px\",\r\n                    margin: \"-6px 2em -6px 0\",\r\n                    fontSize: \"22px\"\r\n                }} >\r\n                    You!\r\n                </label>\r\n                <nav\r\n                style={{\r\n                    display: \"inline-block\"\r\n                }} >\r\n                    <BrowserRouter>\r\n                        {\r\n                            (new Array<null>(\r\n                                ...this.props.items.map(() => null),\r\n                                ...this.props.items.map(() => null)\r\n                            )).slice(0, this.props.items.length * 2 - 1).map((_: null, i: number) => {\r\n                                if (i % 2 === 1) {\r\n                                    return (\r\n                                        <label className=\"splitor\" key={ \"splitor_\" + i } >|</label>\r\n                                    );\r\n                                } else {\r\n                                    return this.parseJSX(this.props.items[Math.floor(i / 2)]);\r\n                                }\r\n                            })\r\n                        }\r\n                    </BrowserRouter>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private parseJSX(item: MenuItem): JSX.Element {\r\n        return (\r\n            <Link to={ item.url } key={ item.text } >\r\n                <label className=\"MenuItem\" >\r\n                    { item.text }\r\n                </label>\r\n            </Link>\r\n        );\r\n    }\r\n};\r\n","/*\r\n * @Author: Antoine YANG \r\n * @Date: 2020-04-13 16:20:08 \r\n * @Last Modified by: Antoine YANG\r\n * @Last Modified time: 2020-04-13 16:47:14\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\n\r\n\r\nexport interface ContainerProps {\r\n    style?: React.CSSProperties;\r\n};\r\n\r\nexport interface ContainerState {};\r\n\r\nexport class Container extends Component<ContainerProps, ContainerState, {}> {\r\n    public constructor(props: ContainerProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n      return (\r\n        <div className=\"container monospaced unselectable\"\r\n        style={{\r\n            ...this.props.style\r\n        }} >\r\n          { this.props.children }\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n","/*\r\n * @Author: Antoine YANG \r\n * @Date: 2020-04-13 18:08:15 \r\n * @Last Modified by: Antoine YANG\r\n * @Last Modified time: 2020-04-13 18:12:57\r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport { Container } from \"../Contaniners/Container\";\r\nimport '../App.css';\r\n\r\n\r\nexport class Home extends Component<{}, {}, {}> {\r\n  public render(): JSX.Element {\r\n    return (\r\n        <Container >\r\n          <p>\r\n            Hello! This is Antoine YANG's blog.\r\n          </p>\r\n          <p>\r\n            Sorry that this page is still under developing.\r\n          </p>\r\n          <p>\r\n            Hope to see you here in the near future. (´∀｀)\r\n          </p>\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n","/*\r\n * @Author: Antoine YANG \r\n * @Date: 2020-04-13 18:12:52 \r\n * @Last Modified by: Antoine YANG\r\n * @Last Modified time: 2020-04-13 18:14:17\r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport { Container } from \"../Contaniners/Container\";\r\nimport '../App.css';\r\n\r\n\r\nexport class BadUrl extends Component<{}, {}, {}> {\r\n  public render(): JSX.Element {\r\n    return (\r\n        <Container >\r\n          <p>\r\n            Welcome to the Vaccum.\r\n          </p>\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n","/*\r\n * @Author: Antoine YANG \r\n * @Date: 2020-04-13 15:29:03 \r\n * @Last Modified by: Antoine YANG\r\n * @Last Modified time: 2020-04-13 19:16:44\r\n */\r\nimport React, { Component } from 'react';\r\n// import { Container } from \"./Contaniners/Container\";\r\nimport { Navigator } from \"./Contaniners/Navigator\";\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport { Home } from \"./MainPages/Home\";\r\nimport { BadUrl } from \"./MainPages/BadUrl\";  \r\n\r\n\r\nclass App extends Component<{}, {}, {}> {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <>\r\n        <Navigator items={ [{\r\n          text: \"Home\",\r\n          url: \"/\"\r\n        }, {\r\n          text: \"Most Viewed\",\r\n          url: \"/most_viewed\"\r\n        }, {\r\n          text: \"Recent\",\r\n          url: \"/recent\"\r\n        }] } >\r\n        </Navigator>\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path=\"/\" exact component={ Home } />\r\n            <Route path=\"/**\" component={ BadUrl } />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}